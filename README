CSCI-561 --- Project 2
======================

The purpose of this project is to learn about Boolean Satisfiability
(SAT) and the application of SAT to planning.

INSTRUCTIONS
============

Setup
-----
1. Form groups of 2-4 to work on this project.
    * "Groups" of one are not allowed.
        * The era of "cowboy coding" ended decades ago, all software engineering is a team effort.
        * You will receive a **-25% penalty** if you do not join a group.

1. From the github.com interface for this repo, click `Use this
   template` to import the starter code.  Create a new, **private** repo
   for your team.

1. Give all team members access to your new repo.

1. Clone the repo.

1. Complete the function stubs in `project-2.lisp`.

1. Answer the questions in `project-2-report.pdf`.
    * You **must** typeset your answers
    * ...and are *highly* recommended to use the provided `.tex` file

Code
----

The code portion of the project is divided into two parts, each
containing two sub parts.

- Part 0: Conversion to conjunctive normal form:
  - Part 0.a: Convert an arbitrary Boolean expression to negation
    normal form.  Complete the function `EXP->NNF`.  Expected length of
    the entire function: about 40 lines.
  - Part 0.b: Convert a Boolean expression in negation normal form to
    conjunctive normal form.  Complete the functions %DIST-OR-AND-1
    and %DIST-OR-AND-AND.  Expected total function length: about 10
    lines each

- Part 1: DPLL
  - Part 1.a: Unit propagation.  Complete the function
    DPLL-UNIT-PROPAGATE.  Expected total function length: about 15
    lines.
  - Part 1.b: DPLL.  Complete the function DPLL. Expected total
    function length: about 20 lines.

Submission
==========

Code
----
Submit `project-2.lisp` (and *only* that file) to [Project 2 - Code](https://www.gradescope.com/courses/814289/assignments/5266093) on Gradescope before the due date.

* Make sure to add your teammates to the submission.

Keep the same function names as given in the starter code. The grading scripts test your code based on these function names, and if you change them, your code will not pass the tests.

Report
------
Submit `project-2-report.pdf` to [Project 2 - Report](https://www.gradescope.com/courses/814289/assignments/5266095) on Gradescope before the due date.

* Make sure to add your teammates to the submission.

Grading
=======

Your code will be run for grading using (approximately) the following
procedure:

    sbcl --load project-2.lisp --load testcases.lisp

Your code needs to produce the correct result to receive credit for
each test case. Make sure your code loads cleanly without compilation
errors, extra I/O, or other side effects.

Please consider and appropriately handle potential edge cases in the
input.
